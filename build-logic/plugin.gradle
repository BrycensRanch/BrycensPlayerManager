//file:noinspection SpellCheckingInspection
//file:noinspection GroovyAssignabilityCheck
// import com.github.spotbugs.snom.SpotBugsTask
import java.text.SimpleDateFormat
//import org.gradle.crypto.checksum.Checksum
buildscript {
    repositories {
        mavenCentral()
    }
}

apply from: "$rootDir/../gradle/jacoco.gradle"
apply from: "$rootDir/../gradle/publish.gradle"

if (rootProject.hasProperty("local_script")) {
    apply from: file(local_script + "/build.local.gradle")
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17


group rootProject.property("group")
//spotbugs {
//    ignoreFailures = true
//    showStackTraces = true
//    showProgress = true
//    effort = "default"
//    reportLevel = "default"
//}


// CI channels will clash if you change the version within build.gradle.kts, this is only for local builds
gitProperties {
    failOnNoGitDirectory = false
    customProperty "git.build.time", { new Date().getTime() }
    extProperty = "gitProps" // git properties will be put in a map at project.ext.gitProps
}
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)


ext {
    mcVersion = "1.19.3"
}

task generateFiles {
    // Generates some files.
}

//task createChecksums(type: Checksum, dependsOn: "build") {
//    inputFiles.setFrom(build)
//    checksumAlgorithm.set(Checksum.Algorithm.SHA512)
//    appendFileNameToChecksum.set(true)
//}

//checkstyle {
//    // toolVersion "10.6.0"
//    // maxWarnings = 0
//}

//tasks.withType(Checkstyle) {
//    reports {
//        xml.required = true
//        html.required = true
//    }
//}

//tasks.withType(SpotBugsTask) {
//    reports {
//        xml {
//            required.set(true)
//        }
//        html {
//            required.set(true)
//        }
//    }
//}

def gitHubRepo = "https://github.com/BrycensRanch/TownyPlus"

compileJava {
    options.fork = true
}
publish {
    dependsOn "clean"
    dependsOn "build"
    tasks.findByName("build").mustRunAfter "clean"

}
assemble {
    dependsOn(shadowJar)
}
archivesBaseName = rootProject.name
allprojects {
    shadowJar {
        archiveClassifier.set("")
//        archiveFileName.set(rootProject.name.capitalize() + project.version + ".jar")
        // Exclude signatures, maven/ and proguard/ from META-INF
        exclude("META-INF/*.SF")
        exclude("META-INF/*.DSA")
        exclude("META-INF/*.RSA")
        exclude("META-INF/maven/**")
        exclude("META-INF/proguard/**")
    }
    sourcesJar.enabled = true
    processResources {
        rootProject.properties.put("version", version)
        expand rootProject.properties
    }

    defaultTasks "build"

}

//license {
//    include "**/*.java"
//
//    matching("**/*.java") {
//        header = file("HEADER.txt")
//    }
//}


tasks.build.dependsOn(shadowJar)
// tasks.test.dependsOn(shadowJar)